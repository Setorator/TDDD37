Task 1, List all employees, i.e. all tuples in the jbemployee relation.:

mysql> select * from jbemployee;
+------+--------------------+--------+---------+-----------+-----------+
| id   | name               | salary | manager | birthyear | startyear |
+------+--------------------+--------+---------+-----------+-----------+
|   10 | Ross, Stanley      |  15908 |     199 |      1927 |      1945 |
|   11 | Ross, Stuart       |  12067 |    NULL |      1931 |      1932 |
|   13 | Edwards, Peter     |   9000 |     199 |      1928 |      1958 |
|   26 | Thompson, Bob      |  13000 |     199 |      1930 |      1970 |
|   32 | Smythe, Carol      |   9050 |     199 |      1929 |      1967 |
|   33 | Hayes, Evelyn      |  10100 |     199 |      1931 |      1963 |
|   35 | Evans, Michael     |   5000 |      32 |      1952 |      1974 |
|   37 | Raveen, Lemont     |  11985 |      26 |      1950 |      1974 |
|   55 | James, Mary        |  12000 |     199 |      1920 |      1969 |
|   98 | Williams, Judy     |   9000 |     199 |      1935 |      1969 |
|  129 | Thomas, Tom        |  10000 |     199 |      1941 |      1962 |
|  157 | Jones, Tim         |  12000 |     199 |      1940 |      1960 |
|  199 | Bullock, J.D.      |  27000 |    NULL |      1920 |      1920 |
|  215 | Collins, Joanne    |   7000 |      10 |      1950 |      1971 |
|  430 | Brunet, Paul C.    |  17674 |     129 |      1938 |      1959 |
|  843 | Schmidt, Herman    |  11204 |      26 |      1936 |      1956 |
|  994 | Iwano, Masahiro    |  15641 |     129 |      1944 |      1970 |
| 1110 | Smith, Paul        |   6000 |      33 |      1952 |      1973 |
| 1330 | Onstad, Richard    |   8779 |      13 |      1952 |      1971 |
| 1523 | Zugnoni, Arthur A. |  19868 |     129 |      1928 |      1949 |
| 1639 | Choy, Wanda        |  11160 |      55 |      1947 |      1970 |
| 2398 | Wallace, Maggie J. |   7880 |      26 |      1940 |      1959 |
| 4901 | Bailey, Chas M.    |   8377 |      32 |      1956 |      1975 |
| 5119 | Bono, Sonny        |  13621 |      55 |      1939 |      1963 |
| 5219 | Schwarz, Jason B.  |  13374 |      33 |      1944 |      1959 |
+------+--------------------+--------+---------+-----------+-----------+
25 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 2,List the name of all departments in alphabetical order. Note: by “name” we mean
the name attribute for all tuples in the jbdept relation

mysql> select * from jbdept order by name;
+----+------------------+-------+-------+---------+
| id | name             | store | floor | manager |
+----+------------------+-------+-------+---------+
|  1 | Bargain          |     5 |     0 |      37 |
| 35 | Book             |     5 |     1 |      55 |
| 10 | Candy            |     5 |     1 |      13 |
| 73 | Children's       |     5 |     1 |      10 |
| 43 | Children's       |     8 |     2 |      32 |
| 19 | Furniture        |     7 |     4 |      26 |
| 99 | Giftwrap         |     5 |     1 |      98 |
| 14 | Jewelry          |     8 |     1 |      33 |
| 47 | Junior Miss      |     7 |     2 |     129 |
| 65 | Junior's         |     7 |     3 |      37 |
| 26 | Linens           |     7 |     3 |     157 |
| 20 | Major Appliances |     7 |     4 |      26 |
| 58 | Men's            |     7 |     2 |     129 |
| 60 | Sportswear       |     5 |     1 |      10 |
| 34 | Stationary       |     5 |     1 |      33 |
| 49 | Toys             |     8 |     2 |      35 |
| 63 | Women's          |     7 |     3 |      32 |
| 70 | Women's          |     5 |     1 |      10 |
| 28 | Women's          |     8 |     2 |      32 |
+----+------------------+-------+-------+---------+
19 rows in set (0.01 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 3, What parts are not in store, i.e. qoh = 0? (qoh = Quantity On Hand

mysql> select * from jbparts where qoh = 0;
+----+-------------------+-------+--------+------+
| id | name              | color | weight | qoh  |
+----+-------------------+-------+--------+------+
| 11 | card reader       | gray  |    327 |    0 |
| 12 | card punch        | gray  |    427 |    0 |
| 13 | paper tape reader | black |    107 |    0 |
| 14 | paper tape punch  | black |    147 |    0 |
+----+-------------------+-------+--------+------+
4 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 4, Which employees have a salary between 9000 (included) and 10000 (included)?

mysql> select * from jbemployee where (salary >= 9000 and salary <= 10000);
+-----+----------------+--------+---------+-----------+-----------+
| id  | name           | salary | manager | birthyear | startyear |
+-----+----------------+--------+---------+-----------+-----------+
|  13 | Edwards, Peter |   9000 |     199 |      1928 |      1958 |
|  32 | Smythe, Carol  |   9050 |     199 |      1929 |      1967 |
|  98 | Williams, Judy |   9000 |     199 |      1935 |      1969 |
| 129 | Thomas, Tom    |  10000 |     199 |      1941 |      1962 |
+-----+----------------+--------+---------+-----------+-----------+
4 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 5, What was the age of each employee when they started working (startyear)?

mysql> select name, (startyear-birthyear) as age_when_started from jbemployee;
+--------------------+------------------+
| name               | age_when_started |
+--------------------+------------------+
| Ross, Stanley      |               18 |
| Ross, Stuart       |                1 |
| Edwards, Peter     |               30 |
| Thompson, Bob      |               40 |
| Smythe, Carol      |               38 |
| Hayes, Evelyn      |               32 |
| Evans, Michael     |               22 |
| Raveen, Lemont     |               24 |
| James, Mary        |               49 |
| Williams, Judy     |               34 |
| Thomas, Tom        |               21 |
| Jones, Tim         |               20 |
| Bullock, J.D.      |                0 |
| Collins, Joanne    |               21 |
| Brunet, Paul C.    |               21 |
| Schmidt, Herman    |               20 |
| Iwano, Masahiro    |               26 |
| Smith, Paul        |               21 |
| Onstad, Richard    |               19 |
| Zugnoni, Arthur A. |               21 |
| Choy, Wanda        |               23 |
| Wallace, Maggie J. |               19 |
| Bailey, Chas M.    |               19 |
| Bono, Sonny        |               24 |
| Schwarz, Jason B.  |               15 |
+--------------------+------------------+
25 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 6, Which employees have a last name ending with “son”?

mysql> select name from jbemployee where (name like "%son, %");
+---------------+
| name          |
+---------------+
| Thompson, Bob |
+---------------+
1 row in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 7, Which items (note items, not parts) have been delivered by a supplier called
Fisher-Price? Formulate this query using a subquery in the where-clause

mysql> select name from jbitem where supplier in (select id from jbsupplier where name = "Fisher-Price");
+-----------------+
| name            |
+-----------------+
| Maze            |
| The 'Feel' Book |
| Squeeze Ball    |
+-----------------+
3 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 8, Formulate the same query as above, but without a subquery.

mysql> select i.name from jbitem as i,jbsupplier as s where (i.supplier=s.id and s.name = "Fisher-Price");
+-----------------+
| name            |
+-----------------+
| Maze            |
| The 'Feel' Book |
| Squeeze Ball    |
+-----------------+
3 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 9, Show all cities that have suppliers located in them. Formulate this query using a
subquery in the where-clause.

mysql> select name from jbcity where id in (select city from jbsupplier);
+----------------+
| name           |
+----------------+
| Amherst        |
| Boston         |
| New York       |
| White Plains   |
| Hickville      |
| Atlanta        |
| Madison        |
| Paxton         |
| Dallas         |
| Denver         |
| Salt Lake City |
| Los Angeles    |
| San Diego      |
| San Francisco  |
| Seattle        |
+----------------+
15 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 10, What is the name and color of the parts that are heavier than a card reader?
Formulate this query using a subquery in the where-clause. (The SQL query must
not contain the weight as a constant.)

mysql> select name, color from jbparts where weight > (select weight from jbparts where name = "card reader");
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.01 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 11, Formulate the same query as above, but without a subquery. (The query must not
contain the weight as a constant.)

mysql> select p.name, p.color from jbparts p, jbparts c where(p.weight > c.weight and c.name = "card reader"); 
+--------------+--------+
| name         | color  |
+--------------+--------+
| disk drive   | black  |
| tape drive   | black  |
| line printer | yellow |
| card punch   | gray   |
+--------------+--------+
4 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 12, What is the average weight of black parts?

mysql> select avg(weight) from jbparts where(color="black"); 
+-------------+
| avg(weight) |
+-------------+
|    347.2500 |
+-------------+
1 row in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 13, What is the total weight of all parts that each supplier in Massachusetts (“Mass”)
has delivered? Retrieve the name and the total weight for each of these suppliers.
Do not forget to take the quantity of delivered parts into account. Note that one
row should be returned for each supplier.

mysql> select co.name, sum(s.quan*p.weight) from jbparts p, jbsupply s, jbsupplier co, jbcity ci where ((p.id = s.part) and (s.supplier = co.id) and (co.city = ci.id) and (ci.state = "Mass")) group by co.name;
+--------------+----------------------+
| name         | sum(s.quan*p.weight) |
+--------------+----------------------+
| DEC          |                 3120 |
| Fisher-Price |              1135000 |
+--------------+----------------------+
2 rows in set (0.01 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 14, Create a new relation (a table), with the same attributes as the table items using
the CREATE TABLE syntax where you define every attribute explicitly (i.e. not
as a copy of another table). Then fill the table with all items that cost less than the
average price for items. Remember to define primary and foreign keys in your
table!

mysql> source ~/TDDD37/task14.sql
Query OK, 0 rows affected (0.02 sec)

Query OK, 14 rows affected (0.00 sec)
Records: 14  Duplicates: 0  Warnings: 0

+-----+-----------------+------+-------+------+----------+
| id  | name            | dept | price | qoh  | supplier |
+-----+-----------------+------+-------+------+----------+
|  11 | Wash Cloth      |    1 |    75 |  575 |      213 |
|  19 | Bellbottoms     |   43 |   450 |  600 |       33 |
|  21 | ABC Blocks      |    1 |   198 |  405 |      125 |
|  23 | 1 lb Box        |   10 |   215 |  100 |       42 |
|  25 | 2 lb Box, Mix   |   10 |   450 |   75 |       42 |
|  26 | Earrings        |   14 |  1000 |   20 |      199 |
|  43 | Maze            |   49 |   325 |  200 |       89 |
| 106 | Clock Book      |   49 |   198 |  150 |      125 |
| 107 | The 'Feel' Book |   35 |   225 |  225 |       89 |
| 118 | Towels, Bath    |   26 |   250 | 1000 |      213 |
| 119 | Squeeze Ball    |   49 |   250 |  400 |       89 |
| 120 | Twin Sheet      |   26 |   800 |  750 |      213 |
| 165 | Jean            |   65 |   825 |  500 |       33 |
| 258 | Shirt           |   58 |   650 | 1200 |       33 |
+-----+-----------------+------+-------+------+----------+
14 rows in set (0.01 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 15, Create a view that contains the items that cost less than the average price for
items. 

mysql> create view item_view as select * from jbitem where price < (select avg(price) from jbitem);
Query OK, 0 rows affected (0.01 sec)

mysql> select * from item_view;
+-----+-----------------+------+-------+------+----------+
| id  | name            | dept | price | qoh  | supplier |
+-----+-----------------+------+-------+------+----------+
|  11 | Wash Cloth      |    1 |    75 |  575 |      213 |
|  19 | Bellbottoms     |   43 |   450 |  600 |       33 |
|  21 | ABC Blocks      |    1 |   198 |  405 |      125 |
|  23 | 1 lb Box        |   10 |   215 |  100 |       42 |
|  25 | 2 lb Box, Mix   |   10 |   450 |   75 |       42 |
|  26 | Earrings        |   14 |  1000 |   20 |      199 |
|  43 | Maze            |   49 |   325 |  200 |       89 |
| 106 | Clock Book      |   49 |   198 |  150 |      125 |
| 107 | The 'Feel' Book |   35 |   225 |  225 |       89 |
| 118 | Towels, Bath    |   26 |   250 | 1000 |      213 |
| 119 | Squeeze Ball    |   49 |   250 |  400 |       89 |
| 120 | Twin Sheet      |   26 |   800 |  750 |      213 |
| 165 | Jean            |   65 |   825 |  500 |       33 |
| 258 | Shirt           |   58 |   650 | 1200 |       33 |
+-----+-----------------+------+-------+------+----------+
14 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 16, What is the difference between a table and a view? One is static and the other is
dynamic. Which is which and what do we mean by static respectively dynamic?

The view, a virtual table, is derived from other tables that could also be virtual tables. 
This means that the view is always up-to-date with the original tables.
According to this, the view could be considered to be dynamical since it automatically changes
according the original table. This means that a table would be considered statical.
But on the other hand one can argument that a table is the one to be dynamical since you can
change values in the table but not explicitly in the view, thus making the view static.
According to us this is therefore a matter of interpretation of the static/dynamic definitions.

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 17, Create a view, using only the implicit join notation, i.e. only use where statements
but no inner join, right join or left join statements, that calculates the total cost of
each debit, by considering price and quantity of each bought item. (To be used for
charging customer accounts). The view should contain the sale identifier (debit)
and total cost.

mysql> create view debit_view as
    -> select d.id as debitID, sum(s.quantity*i.price) as total
    -> from jbdebit d, jbsale s, jbitem i
    -> where ((d.id = s.debit) and (s.item = i.id))
    -> group by d.id;
Query OK, 0 rows affected (0.01 sec)

mysql> select * from debit_view;
+---------+-------+
| debitID | total |
+---------+-------+
|  100581 |  2050 |
|  100582 |  1000 |
|  100586 | 13446 |
|  100592 |   650 |
|  100593 |   430 |
|  100594 |  3295 |
+---------+-------+
6 rows in set (0.00 sec)

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 18, Do the same as in (17), using only the explicit join notation, i.e. using only left,
right or inner joins but no where statement. Motivate why you use the join you do
(left, right or inner), and why this is the correct one (unlike the others).

mysql> create view joined_debit_view as  
    -> select jbdebit.id, sum(quantity*price) as total
    -> from jbdebit left join (jbsale left join jbitem on jbsale.item = jbitem.id) on jbdebit.id = jbsale.debit
    -> group by jbdebit.id;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from joined_debit_view;
+--------+-------+
| id     | total |
+--------+-------+
| 100581 |  2050 |
| 100582 |  1000 |
| 100586 | 13446 |
| 100592 |   650 |
| 100593 |   430 |
| 100594 |  3295 |
+--------+-------+
6 rows in set (0.01 sec)

We are using the left outer join. The reason we are using the outer join is that we want to show all the 
total costs for each debit, including null values. This would be impossible with a inner join since it
does not include null values in the resulting table/view. We could have used a right outer join as well,
the only difference would be the calling order of the joining tables.

------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 19, Oh no! An earthquake!
a) Remove all suppliers in Los Angeles from the table jbsupplier. This will not
work right away (you will receive error code 23000) which you will have to
solve by deleting some other related tuples. However, do not delete more
tuples from other tables than necessary and do not change the structure of the
tables, i.e. do not remove foreign keys. Also, remember that you are only
allowed to use “Los Angeles” as a constant in your queries, not “199” or
“900”.
b) Explain what you did and why.

######### Code and explanation is found in task19.sql ############
mysql> source task19.sql;
Query OK, 1 row affected (0.00 sec)

Query OK, 2 rows affected (0.00 sec)

Query OK, 0 rows affected (0.00 sec)

Query OK, 1 row affected (0.01 sec)



------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------

Task 20, An employee has tried to find out which suppliers that have delivered items that
have been sold. He has created a view and a query that shows the number of items
sold from a supplier.
mysql> CREATE VIEW jbsale_supply(supplier, item, quantity) AS 
 -> SELECT jbsupplier.name, jbitem.name, jbsale.quantity
 -> FROM jbsupplier, jbitem, jbsale
 -> WHERE jbsupplier.id = jbitem.supplier
 -> AND jbsale.item = jbitem.id;
Query OK, 0 rows affected (0.01 sec)
mysql> SELECT supplier, sum(quantity) AS sum FROM jbsale_supply 
 -> GROUP BY supplier;
+--------------+---------------+
| supplier | sum(quantity) |
+--------------+---------------+
| Cannon | 6 |
| Levi-Strauss | 1 |
| Playskool | 2 |
| White Stag | 4 |
| Whitman's | 2 |
+--------------+---------------+
5 rows in set (0.00 sec)
The employee would also like include the suppliers which has delivered some
items, although for whom no items have been sold so far. In other words he wants
to list all suppliers, which has supplied any item, as well as the number of these
items that have been sold. Help him! Drop and redefine jbsale_supply to
consider suppliers that have delivered items that have never been sold as well.
Hint: The above definition of jbsale_supply uses an (implicit) inner join that
removes suppliers that have not had any of their delivered items sold.
